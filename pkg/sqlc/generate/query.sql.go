// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: query.sql

package sqlc

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
    id,
    data
) VALUES (
    $1,
    $2
) RETURNING id, data
`

type CreateOrderParams struct {
	ID   string `json:"id"`
	Data []byte `json:"data"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder, arg.ID, arg.Data)
	var i Order
	err := row.Scan(&i.ID, &i.Data)
	return i, err
}

const getOrder = `-- name: GetOrder :one
SELECT id, data FROM orders
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, id string) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i Order
	err := row.Scan(&i.ID, &i.Data)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, data FROM orders
ORDER BY id DESC LIMIT $1
`

func (q *Queries) ListOrders(ctx context.Context, limit int32) ([]Order, error) {
	rows, err := q.db.Query(ctx, listOrders, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(&i.ID, &i.Data); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
